buildscript {
    repositories {
        // 使用国内阿里云仓库，下载速度快
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin'}
    }
    dependencies {
        // Docker插件
        classpath('com.bmuschko:gradle-docker-plugin:6.4.0')
    }
}

plugins {
    id 'com.arenagod.gradle.MybatisGenerator' version '1.4'
    id 'org.springframework.boot' version '2.6.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

}

repositories {
    // 使用国内阿里云仓库，下载速度快
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin'}
}

// 应用插件
apply plugin: 'com.bmuschko.docker-spring-boot-application'

docker {
//    if(project.hasProperty('dockerUrl')) {
//        url = project.getProperties().get('dockerUrl') // docker地址
//    }
//    def registryHost = project.getProperties().get('registryHost'); // 镜像仓库地址
//    def registryCredentialUrl = project.getProperties().get('registryCredentialUrl'); // 镜像仓库验证地址
//    def registryCredentialUsername = project.getProperties().get('registryCredentialUsername'); // 镜像仓库验证用户名
//    def registryCredentialPassword = project.getProperties().get('registryCredentialPassword'); // 镜像仓库验证密码
//    def imageName = "${project.archivesBaseName}"
//    if(registryHost) {
//        imageName = "${registryHost}/${imageName}"
//    }
//    springBootApplication {
//        baseImage = 'openjdk:8-alpine'
//        ports = [8081]
//        images = ["${imageName}:${version}", "${imageName}:latest"]
//        jvmArgs = ["-Duser.timezone=Asia/Shanghai"]
//    }
//    if(registryCredentialUrl && registryCredentialUsername && registryCredentialPassword) {
//        registryCredentials {
//            url = registryCredentialUrl
//            username = registryCredentialUsername
//            password = registryCredentialPassword
//        }
//    }

    springBootApplication {
        baseImage = 'openjdk:8-alpine'
        ports = [8081]
        images = ['app:1.0.0', 'app:latest']
        jvmArgs = []
    }
}

dependencies {
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'

    // https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter
    implementation 'com.baomidou:mybatis-plus-boot-starter:3.5.1'
    // https://mvnrepository.com/artifact/org.freemarker/freemarker
    implementation 'org.freemarker:freemarker:2.3.31'
    // https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-generator
    implementation 'com.baomidou:mybatis-plus-generator:3.5.1'

    // https://mvnrepository.com/artifact/org.mybatis.generator/mybatis-generator-core
    compileOnly 'org.mybatis.generator:mybatis-generator-core:1.3.7'

    // 自定义mybatisGenerator task需要的包
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.7'
    mybatisGenerator 'tk.mybatis:mapper:3.3.9'
    mybatisGenerator 'mysql:mysql-connector-java:6.0.6'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    // https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    //数据库连接池
    implementation 'com.zaxxer:HikariCP:3.2.0'

    //页面
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // jwt jwt相关依赖
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    //JSON
//    implementation 'com.alibaba.fastjson:fastjson'

    //utils
    implementation 'cn.hutool:hutool-all:5.7.22'
}

//#自定义的task mybatisGenerate
task mybatisGenerate {
//    ant.taskdef(
//            name: 'mbgenerator',
//            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
//            classpath: configurations.mybatisGenerator.asPath
//    )
//    ant.mbgenerator(overwrite: true,
//            configfile: 'src/main/resources/generator/generatorConfig.xml', verbose: true)
}

tasks.named('test') {
    useJUnitPlatform()
}
